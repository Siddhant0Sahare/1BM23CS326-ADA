import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
    def __lt__(self, other):
        return self.val < other.val

class Solution:
    def mergeKLists(self, lists):
        min_heap = []
        
        for node in lists:
            if node:
                heapq.heappush(min_heap, node)
        
        dummy = ListNode(0)
        current = dummy
        
        while min_heap:
            node = heapq.heappop(min_heap)
            current.next = node
            current = current.next
            if node.next:
                heapq.heappush(min_heap, node.next)
        
        return self.mergeSort(dummy.next)
    
    def mergeSort(self, head):
        if not head or not head.next:
            return head
        
        middle = self.getMiddle(head)
        next_to_middle = middle.next
        middle.next = None
        
        left = self.mergeSort(head)
        right = self.mergeSort(next_to_middle)
        
        return self.merge(left, right)
    
    def getMiddle(self, head):
        if not head:
            return head
        
        slow = head
        fast = head
        
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
        
        return slow
    
    def merge(self, left, right):
        dummy = ListNode(0)
        current = dummy
        
        while left and right:
            if left.val <= right.val:
                current.next = left
                left = left.next
            else:
                current.next = right
                right = right.next
            current = current.next
        
        if left:
            current.next = left
        else:
            current.next = right
        
        return dummy.next
